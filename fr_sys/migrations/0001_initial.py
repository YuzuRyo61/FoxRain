# Generated by Django 3.0.6 on 2020-06-01 07:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='FediverseServer',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=255, unique=True)),
                ('is_block', models.BooleanField(default=False)),
                ('is_deprecated', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FediverseUser',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(editable=False, max_length=32, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9_]+$')])),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_bot', models.BooleanField(default=False)),
                ('is_silence', models.BooleanField(default=False)),
                ('is_suspend', models.BooleanField(default=False)),
                ('publicKey', models.TextField(editable=False)),
                ('registered', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('server', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='fr_sys.FediverseServer')),
            ],
        ),
        migrations.CreateModel(
            name='Emoji',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('remote', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='fr_sys.FediverseServer')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(editable=False, max_length=32, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9_]+$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_emailVerified', models.BooleanField(default=False)),
                ('is_bot', models.BooleanField(default=False)),
                ('is_silence', models.BooleanField(default=False)),
                ('is_suspend', models.BooleanField(default=False)),
                ('is_manualFollow', models.BooleanField(default=False)),
                ('moderator', models.BooleanField(default=False)),
                ('administrator', models.BooleanField(default=False)),
                ('registered', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('publicKey', models.TextField(editable=False)),
                ('privateKey', models.TextField(editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
